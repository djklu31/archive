#!/bin/bash

#Kenny Lu
#CS 344
#Program 1

arg1=$1
FILE=$2
extraparams=$3
go=0

#check to see if standard input of numbers is necessary

if [ -z "$arg1" ]
then
{
	echo "Usage: stats {-rows|-cols} [file] (no parameters entered)" >&2
	exit 1
}
fi

if [ -z "$extraparams" ]
then
{
	echo "No extra parameters. Okay to continue..."
}
else
{
	#echo "Throw Error. Extra Param found..."
	echo "Usage: stats {-rows|-cols} [file] (extra parameters found)" >&2
	exit 1
}
fi

if [[ $arg1 == -c* || $arg1 == -C* || $arg1 == -r* || $arg1 == -R* ]]
then
{
	echo "2nd parameter is valid. Okay to Continue..."
	

}
else
{

	#echo "Throw Error. 2nd (-r/-c) parameter invalid..."
	echo "Usage: stats {-rows|-cols} [file] (2nd 'rows or -columns' parameter is invalid)" >&2
	exit 1


}
fi

if [ -z "$FILE" ]
then
{
	echo "No text file was passed in..."
	

	while [ $go -lt 1 ]
	do
	{
		echo "Enter some numbers separated by tabs: "
		read numbers
	
		echo $numbers > tempnumbs.txt

		FILE=tempnumbs.txt
		
		go=1
	}
	done
}
fi

#echo "row/column selection is $arg1"
#echo "filename is $FILE"

#echo "Reading each line and set each line in an array..."

i=0

#trap "echo stats: misc error found ... exiting; rm row**.txt; rm col**.txt; rm col**.sort; rm row**.sort; rm temp**.txt; exit 1" ERR

while read line
do
{
	array[i]=$line
#	echo "Saving line to array[$i] containing the numbers: ${array[i]}"

	let i+=1

}

done < $FILE

if [ $? -eq 1 ]
then 
{
	echo "stats: cannot read $FILE (3rd param passed in is invalid)" >&2
	exit 1 
}
fi


#echo "Parsing each line and putting every number into an array of format array[x,y]..."
#echo "First number of array represents the line number and the sencond represents the number address on the line..."


for (( x=0; x<i; x++ ))
do
{
#	echo "Line $x = ${array[x]}"
	
	cnt=0
	
	for v in ${array[x]}
	do
#		echo "Number $cnt is $v"

		linenum[$x$cnt]=$v 	#store number in an array in the format of array[x,y]
# x represents the line number and cnt represents the column per line
#saving these number in an array will make column calculations much easier
		
		
#		echo "array element linenum[$x$cnt]= ${linenum[$x$cnt]}"

		echo $v >> row$$$x.txt			#save numbers in row in appended style to txt to be sorted for median
		
		let cnt+=1
	done
}
done


#echo "numbers per line is $cnt"
#echo "number of lines is $i"



#function for rounding averages

function round {

	numerator=$1
	denominator=$2
	modulus=`expr $1 % $2`

#	echo "old denominator is $denominator"
	if [ `expr $2 % 2` -ne 0 ]		#if the denominator is odd, see if the tenth place is greater than .5
	then
	{
		oddmodulus=`expr $2 % 2`
		if [ $oddmodulus -ge `expr $2 / 2` ]
		then 
		{
#			echo "new denominator is $denominator"
			let denominator+=1
		}
		fi

		if [ $modulus -gt `expr $denominator / 2` ]
		then
		{
			averound=`expr \( $1 / $2 \) + 1`
		}
		else
		{
			averound=`expr \( $1 / $2 \)`
		}
		fi
		
	}
	elif [ $modulus -ge `expr $denominator / 2` ]		#if the denominator is even
	then
	{
		averound=`expr \( $1 / $2 \) + 1`
	}
	else
	{	
#		echo "round down nothing changed"
		averound=`expr \( $1 / $2 \)`
#		echo "ave unchanged is $averound"
	}
	fi
}



#echo "Save averages of rows into an array averagerow"

for (( x=0; x<i; x++ ))
do
{
	counter=0
	sum=0
	
	for (( y=0; y<cnt; y++ ))
	do
	{

		let sum+=${linenum[$x$y]}

	}
	done
	
	round $sum $cnt

	averagerow[$x]=$averound                        #calculate average of row

	#echo "sum of row $x is $sum"
#	echo "average of row $x is ${averagerow[$x]}"

}
done

#echo "Saving average of columns into an array averagecol..."

for (( x=0; x<cnt; x++ ))
do
{
	counter=0
	sum=0

	for (( y=0; y<i; y++ ))
	do
	{
		
		echo ${linenum[$y$x]} >> col$$$x.txt		#save numbers in each column in appended style to txt to be sorted for median later

		let sum+=${linenum[$y$x]}
	}
	done
	
	round $sum $i	

	averagecol[$x]=$averound				#calculate average of column

#	echo "average of column $x is ${averagecol[$x]}"

}
done



#echo "Finding Median of Rows..."

modrow=`expr $cnt % 2`


#first sort the row text files
for (( x=0; x<i; x++ ))
do
{
	sort row$$$x.txt > row$$$x.txt.sort

	
#	echo "Row $x Sorted: "; cat row$$$x.txt.sort

}
done

#see how to obtain the median (even or odd numbers in row)
if [ $modrow -eq 0 ]

then
{
#	echo "$cnt is even"	

	medindex=`expr \( $cnt / 2 \) + 1`

	index=0

#	echo "i is $i"

	for (( x=0; x<i; x++ ))
	do
	{
		count=1
		
		while read line
		do
		{


	
			if [[ $count -eq $medindex ]]
			then
			{
			
				
				top=$line
				
#				echo "top number of median is $top"
								



	
				median=$top

				medianrow[$index]=$median	

#				echo "Median of Line $x is ${medianrow[$index]}"
				let index+=1
			}
			fi
		
			let count+=1
		}
		done <row$$$x.txt.sort

	#rm row$$$x.txt
	#rm row$$$x.txt.sort
	}
	done
}
else
{
#	echo "$cnt is odd"

	medindex=`expr \( $cnt / 2 \) + 1`
	
	index=0

#	echo "i is $i"

	for (( x=0; x<i; x++ ))
	do	
	{
		count=1		

		while read line
		do
		{
			if [[ $count -eq $medindex ]]
			then
			{
			
				medianrow[$index]=$line
#				echo "Median of Line $x is ${medianrow[$index]}"			
				let index+=1
			}
			fi

			let count+=1
		}	
		done < row$$$x.txt.sort

	#rm row$$$x.txt
	#rm row$$$x.txt.sort
	
	}
	done

}
fi




#echo "Finding Median for Columns..."

modcol=`expr $i % 2`


#first sort the column text files
for (( x=0; x<cnt; x++ ))
do
{


	sort col$$$x.txt > col$$$x.txt.sort


#	echo "Column $x Sorted: "; cat col$$$x.txt.sort
}
done

if [ $modcol -eq 0 ]
then
{

#	echo "$i is even"	

	medindex=`expr \( $i / 2 \) + 1`

	index=0


	for (( x=0; x<cnt; x++ ))
	do
	{
		count=1
		
		while read line
		do
		{
	
			if [[ $count -eq $medindex ]]
			then
			{
			
				
				top=$line
				
#				echo "top number is $top"
				
	


	
				median=$top

				mediancol[$index]=$median	

#				echo "Median of Line $x is ${mediancol[$index]}"
				let index+=1
			}
			fi
		
			let count+=1
		}
		done <col$$$x.txt.sort

	#rm col$$$x.txt
	#rm col$$$x.txt.sort
	}
	done


}
else
{
#	echo "$i is not even"
	medindex=`expr \( $i / 2 \) + 1`
	
	index=0

	for (( x=0; x<cnt; x++ ))
	do	
	{
		count=1		

		while read line
		do
		{
			if [[ $count -eq $medindex ]]
			then
			{
			
				mediancol[$index]=$line
#				echo "Median of Line $x is ${mediancol[$index]}"			
				let index+=1
			}
			fi

			let count+=1
		}	
		done < col$$$x.txt.sort
	
	#rm col$$$x.txt
	#rm col$$$x.txt.sort
	
	}
	done


}
fi


#print out values...

trap "echo stats: misc error found ... exiting; rm row**.txt; rm col**.txt; rm col**.sort; rm row**.sort; rm temp**.txt; exit 1" ERR

if [[ $arg1 == -r* || $arg1 == -R* ]]

then
{
#print out rows (average/median)
echo "Printing out Row Values..."

echo "Average	Median"

for (( x=0; x<i; x++ ))
do
{

	echo "${averagerow[$x]}	${medianrow[$x]}"



}
done

if [ $go -eq 1 ]
then
rm temp**.txt		#remove tempfiles
fi


rm row**.txt
rm col**.txt
rm row**.sort
rm col**.sort
}
fi




#print out columns (average/median)


if [[ $arg1 == -c* || $arg1 == -C* ]]

then
{
echo "Printing out Column Values..."

echo "Average: "

for (( x=0; x<cnt; x++ ))
do
{
	echo -n "${averagecol[$x]}"

	echo -n -e "\t"
}
done

echo -e "\n"

echo "Median: "

for (( x=0; x<cnt; x++ ))
do
{
	echo -n "${mediancol[$x]}"

	echo -n -e "\t"
}
done

echo -e "\n"

if [ $go -eq 1 ]
then
rm temp**.txt		#remove tempfiles
fi

rm row**.txt
rm col**.txt
rm row**.sort
rm col**.sort

}
fi
